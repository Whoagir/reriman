from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import os
import random

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ü—É—Ç—å –∫ –∑–∞–¥–∞–Ω–∏—è–º –∏ –æ—Ç–≤–µ—Ç–∞–º
TASK_IMG_PATH = "task_img/"
TASK_ANS_PATH = "task_ans/"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã."""
    user_id = update.effective_chat.id
    if user_id not in user_data:
        user_data[user_id] = {"correct": 0, "total": 0}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ /gettask, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ!")


async def gettask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫
        folders = os.listdir(TASK_IMG_PATH)
        folder_list = "\n".join(f"*{i + 1}.* {folder}" for i, folder in enumerate(folders))
        context.user_data["available_folders"] = folders

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∑–∞–¥–∞–Ω–∏—è–º–∏, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ—ë –Ω–æ–º–µ—Ä:\n{folder_list}"
        )

    except Exception as e:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–ø–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫!")
        print(f"–û—à–∏–±–∫–∞: {e}")


async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞."""
    user_id = update.effective_chat.id
    if "current_task" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /gettask.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    try:
        user_answer = int(update.message.text.split()[1])
        folder, task_number = context.user_data["current_task"]

        # –ß–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ txt —Ñ–∞–π–ª–∞
        with open(f"{TASK_ANS_PATH}/{folder}/ans.txt", "r") as ans_file:
            answers = {line.split('.')[0]: int(line.split('.')[1].strip()) for line in ans_file.readlines()}

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        correct_answer = answers.get(task_number)
        if correct_answer == user_answer:
            user_data[user_id]["correct"] += 1
            await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}.")

        user_data[user_id]["total"] += 1
        context.user_data.pop("current_task")  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–æ—Ç–≤–µ—Ç X', –≥–¥–µ X ‚Äî —á–∏—Å–ª–æ.")
    except Exception as ex:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        print("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞:", ex)


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–µ–Ω–∏–∫–∞."""
    user_id = update.effective_chat.id
    if user_id in user_data:
        correct = user_data[user_id]["correct"]
        total = user_data[user_id]["total"]
        await update.message.reply_text(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {correct}/{total} (–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö/–≤—Å–µ–≥–æ).")
    else:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    TOKEN = "7936087407:AAGJVQlJe8LHgrFUxNQTOqG9QRGHGdAhhzE"

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    application = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("gettask", gettask))
    application.add_handler(CommandHandler("stats", stats))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
