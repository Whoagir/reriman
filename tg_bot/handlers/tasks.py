import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler, CommandHandler, MessageHandler, filters
from handlers.utils import load_answers, save_user_statistics
from config import TASK_IMG_PATH, TASK_ANS_PATH

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

async def select_folder(update: Update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏."""
    folders = os.listdir(TASK_IMG_PATH)
    folders = [folder for folder in folders if os.path.isdir(os.path.join(TASK_IMG_PATH, folder))]

    keyboard = [
        [InlineKeyboardButton(f"–ù–∞–±–æ—Ä {folder}", callback_data=f"select_folder_{folder}")]
        for folder in folders
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä –∑–∞–¥–∞–Ω–∏–π:", reply_markup=reply_markup)


async def select_task(update: Update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ."""
    query = update.callback_query
    folder_id = query.data.split("_")[2]

    folder_path = os.path.join(TASK_IMG_PATH, folder_id)
    tasks = os.listdir(folder_path)
    tasks = [task for task in tasks if task.endswith(".png")]

    keyboard = [
        [InlineKeyboardButton(f"–ó–∞–¥–∞–Ω–∏–µ {task.split('.')[0]}", callback_data=f"select_task_{folder_id}_{task.split('.')[0]}")]
        for task in tasks
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–±–æ—Ä {folder_id}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=reply_markup)


async def send_task(update: Update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –∑–∞–¥–∞–Ω–∏–µ–º –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç."""
    query = update.callback_query
    _, folder_id, task_id = query.data.split("_")

    task_path = os.path.join(TASK_IMG_PATH, folder_id, f"{task_id}.png")

    if os.path.exists(task_path):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ user_states
        user_states[query.from_user.id] = {
            "folder_id": folder_id,
            "task_id": task_id
        }

        with open(task_path, "rb") as task_file:
            await query.message.reply_photo(
                photo=task_file,
                caption=f"–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ {task_id} –∏–∑ –Ω–∞–±–æ—Ä–∞ {folder_id}. "
                        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n*–æ—Ç–≤–µ—Ç –•*, –≥–¥–µ –• ‚Äî –≤–∞—à –æ—Ç–≤–µ—Ç."
            )
    else:
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")


async def check_answer(update: Update, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    user_id = update.message.from_user.id

    if user_id not in user_states:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    folder_id = user_states[user_id]["folder_id"]
    task_id = user_states[user_id]["task_id"]

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    answers_path = os.path.join(TASK_ANS_PATH, folder_id, "ans.txt")
    answers = load_answers(answers_path)

    if not answers:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
        return

    user_answer = update.message.text.lower().replace("–æ—Ç–≤–µ—Ç", "").strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    correct_answer = answers.get(task_id)
    if correct_answer is None:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ.")
        return

    if user_answer == correct_answer:
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –º–æ–ª–æ–¥–µ—Ü üëè")
        save_user_statistics(user_id, folder_id, task_id, True)
    else:

        await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
        save_user_statistics(user_id, folder_id, task_id, False)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
    user_states.pop(user_id, None)

    # –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∑–∞–¥–∞—á
    select_folder_handler = CommandHandler("start", select_folder)
    select_task_handler = CallbackQueryHandler(select_task, pattern=r"^select_folder_\d+$")
    send_task_handler = CallbackQueryHandler(send_task, pattern=r"^select_task_\d+_\d+$")
    check_answer_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer)

